"""Added growth_stage and other fields to SprayProgram

Revision ID: 52bac25085b1
Revises: 8184b7831da1
Create Date: 2025-06-27 09:44:18.554016

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '52bac25085b1'
down_revision: Union[str, Sequence[str], None] = '8184b7831da1'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_created_date'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_users_last_login'), table_name='users')
    op.drop_table('users')
    op.add_column('spray_programs', sa.Column('concentration_factor', sa.Numeric(precision=3, scale=2), nullable=False))
    op.add_column('spray_programs', sa.Column('growth_stage_id', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'spray_programs', 'growth_stages', ['growth_stage_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'spray_programs', type_='foreignkey')
    op.drop_column('spray_programs', 'growth_stage_id')
    op.drop_column('spray_programs', 'concentration_factor')
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('hash_password', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_login', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('users_pkey'))
    )
    op.create_index(op.f('ix_users_last_login'), 'users', ['last_login'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_created_date'), 'users', ['created_date'], unique=False)
    # ### end Alembic commands ###
