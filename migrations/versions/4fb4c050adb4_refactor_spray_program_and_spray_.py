"""refactor spray_program and spray relationship from many-to-many to one-to-many

Revision ID: 4fb4c050adb4
Revises: bfb7fa768c2f
Create Date: 2025-07-29 09:37:20.277598

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "4fb4c050adb4"
down_revision: Union[str, Sequence[str], None] = "bfb7fa768c2f"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Add spray_program_id column to sprays table
    op.add_column("sprays", sa.Column("spray_program_id", sa.Integer(), nullable=True))

    # Migrate existing data from link table to direct foreign key
    # This assumes you want to keep the first spray program association for each spray
    op.execute("""
        UPDATE sprays 
        SET spray_program_id = (
            SELECT spray_program_id 
            FROM spray_program_spray_links 
            WHERE spray_program_spray_links.spray_id = sprays.id 
            LIMIT 1
        )
        WHERE id IN (SELECT spray_id FROM spray_program_spray_links)
    """)

    # For sprays that weren't linked to any program, you might want to:
    # 1. Delete them, or 2. Assign them to a default program
    # Example: Delete orphaned sprays
    op.execute("DELETE FROM sprays WHERE spray_program_id IS NULL")

    # Make spray_program_id NOT NULL
    op.alter_column("sprays", "spray_program_id", nullable=False)

    # Add foreign key constraint
    op.create_foreign_key(
        "fk_sprays_spray_program_id",
        "sprays",
        "spray_programs",
        ["spray_program_id"],
        ["id"],
    )
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("spray_program_spray_links")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Recreate link table
    op.create_table(
        "spray_program_spray_links",
        sa.Column("spray_program_id", sa.Integer(), nullable=False),
        sa.Column("spray_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["spray_id"], ["sprays.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["spray_program_id"], ["spray_programs.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("spray_program_id", "spray_id"),
    )

    # Migrate data back to link table
    op.execute("""
        INSERT INTO spray_program_spray_links (spray_program_id, spray_id)
        SELECT spray_program_id, id FROM sprays WHERE spray_program_id IS NOT NULL
    """)

    # Remove foreign key and column
    op.drop_constraint("fk_sprays_spray_program_id", "sprays", type_="foreignkey")
    op.drop_column("sprays", "spray_program_id")

    # ### end Alembic commands ###
